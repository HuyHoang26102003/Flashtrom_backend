import { Repository } from 'typeorm';
import { AdminChartRecord } from './entities/admin_chart_record.entity';
import { Order } from 'src/orders/entities/order.entity';
import { User } from 'src/users/entities/user.entity';
import { Promotion } from 'src/promotions/entities/promotion.entity';
import { Customer } from 'src/customers/entities/customer.entity';
import { Driver } from 'src/drivers/entities/driver.entity';
import { Restaurant } from 'src/restaurants/entities/restaurant.entity';
import { RatingsReview } from 'src/ratings_reviews/entities/ratings_review.entity';
import { ApiResponse } from 'src/utils/createResponse';
import { PeriodType } from './dto/admin_chart_query.dto';
export declare class AdminChartService {
    private adminChartRepo;
    private orderRepo;
    private userRepo;
    private promotionRepo;
    private customerRepo;
    private driverRepo;
    private restaurantRepo;
    private ratingsReviewRepo;
    private readonly redisClient;
    constructor(adminChartRepo: Repository<AdminChartRecord>, orderRepo: Repository<Order>, userRepo: Repository<User>, promotionRepo: Repository<Promotion>, customerRepo: Repository<Customer>, driverRepo: Repository<Driver>, restaurantRepo: Repository<Restaurant>, ratingsReviewRepo: Repository<RatingsReview>);
    private getCachedData;
    private setCachedData;
    getChartData(startDate: number, endDate: number, periodType?: PeriodType, forceRefresh?: boolean): Promise<ApiResponse<any>>;
    generateChartData(startDate: number, endDate: number, periodType?: PeriodType): Promise<void>;
    private calculateTotalUsers;
    private calculateSoldPromotions;
    private calculateNetIncome;
    private calculateGrossIncome;
    private calculateOrderStats;
    private calculateUserGrowthRate;
    private calculateGrossFromPromotion;
    private calculateAvgCustomerSatisfaction;
    private calculateAvgDeliveryTime;
    private calculateOrderCancellationRate;
    private calculateOrderVolume;
    private calculateChurnRate;
}
